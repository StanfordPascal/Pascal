NEW STANFORD PASCAL COMPILER

References:

you can get additional information about this compiler from here:

- http://bernd-oppolzer.de/job9.htm
- https://github.com/StanfordPascal/Pascal

This compiler runs on VM/CMS and on MVS (z/OS) on IBM Mainframes,
but also on Windows, OS/2, Linux, Unix, MacOS, ...
the generated P-Code (text format) should be portable across platforms

If you have questions or error reports, mail to berndoppolzer@yahoo.com


Simple commands:

PASCAL - Command to invoke the compiler (both passes including linker)
PASRUN - Command to run Pascal programs

Special commands:

PASCOMP - Command to run the compiler only (Pass 1)
PASC370 - Command to run the P-Code translator (Pass 2)
PASLINK - Command to run the Pascal linker
PASRUNS - Command to run Pascal programs with standard FILEDEFS (screen I/O)
PASFORM - Command to run the source code formatter (or pretty printer)


Purpose:

  The commands from above invoke the New Stanford Pascal compiler to compile
programs written in the Pascal language first into P-Code (pass 1) and then
into 370 machine code, including program listings and diagnostics and, if
desired, ASSEMBLY listings.

  The language implemented is Standard Pascal with several significant
enhancements, for example

- new simplified datatypes like CHAR(n), STRING(n) and DECIMAL(n,m)
- many new functions, similar to IBM's Pascal VS
- const declarations of structured types
- initializations of variables
- static definitions
- WITH clause in record type definitions
- separate compilation of modules with external procedures
- calling external procedures written in FORTRAN or ASSEMBLER language
- reading and writing of text or binary files using arbitrary DD names
- command line parameters
- Pascal call trace and output of Pascal variables in PASSNAP error handler


PASCAL command:

  PASCAL sourcename
  or
  PASCAL sourcename (NOLINK

  sourcename    is the name of the Pascal source file to be compiled;
                the file must have filetype PASCAL and must have
                fixed record format and LRECL 80

  Usage:

  The PASCAL command compiles the Pascal source into 370 machine code
  (filetype TEXT). The compiler writes a listing including the source
  code and error messages (filetype LISTING); error message are written
  to the terminal, too.

  The first pass builds a P-Code result file with filetype PCODE; the
  second pass compiles this P-Code file to 370 machine code. If desired,
  an ASSEMBLY representation of the generated code is written to a
  file with filetype LIST002. For more information, see "Compiler Options",
  later.

  If you specify (NOLINK, then the TEXT file is the final result;
  this TEXT file can be executed anyway, using PASRUN (see later).
  If you don't specify (NOLINK, PASLINK is called and builds a MODULE
  in addition to the TEXT file, which can (in theory) be called
  without using PASRUN - but the MODULEs don't work at the moment.

  You should specify (NOLINK if you compile a subprogram.

  PASLINK and PASRUN are needed to add the Pascal run time routines
  to the object file generated by the compiler; more about the run time
  routines see later in "Run Time Routines".


Compiler Options

  The compiler options are not specified when calling the compiler,
  but instead they have to be inserted into the source code, inside
  comments, following a dollar sign at the beginning of the comment.

  For example:

  (*$D+ *)
  //$A+
  (*$D+,N+,A-    *)

  the first comment enables debugging
  the second comment (C++ style) asks for an ASSEMBLY listing
  the third example shows how multiply options can be set or unset
  in one single comment (N+ enables nested comments)

  Available Options (not all options may have an effect):

  A  +/-         print ASSEMBLY Code in LIST002 (default = -)
  C  +/-         generate P-CODE (default = +)
  D  +/-/0..9    set debugging level (default = 2)
  E              emit page
  F  +/-         save FP registers (default = +)
  I  +/-         init auto areas (default = -)
  K  +/-         show counters (default = -)
  L  +/-         show listing (default = +)
  M  +/-/(m,n)   margins
  N  +/-         nested comments (default = -)
  P  +/-         packing (default = +)
  Q  n           pagesize (default = 72)
  S  +/-         save general registers (default = +)
  U  +/-         get statistics (default = -)
  V  +/-         show verbose Assembler (default = -)
  W  +/-         show warnings (default = +)
  X  +/-         show listdef (default = -)

  Some remarks:

  The C option should not be switched off, the results could be
  unpredictable. Same goes for the F and S options.

  The I option can be expensive.

  Don't know about the effect of the K and U and V options.

  The L option has no effect; the listing is always written.

  Don't know about the M option; the default margins on the mainframe
  are columns 1 to 80, although I use only 1 to 72 most of the time.

  The D option (debugging) is very useful even in productive use of
  programs; for example with D+ all array references are checked
  (indices within bounds). Even the Pascal compiler runs with D+.

  You are encouraged to use the A option, if you want to look
  at the generated 370 machine code.

  There is no problem with the N option; only comments of the
  same type can be nested; for example (* (* nested *) *)

  The X option is most useful for the compiler maintainer.


PASRUN command:

  PASRUN mainpgm
  PASRUN mainpgm ( runparms
  PASRUN mainpgm subpgms
  PASRUN mainpgm subpgms ( runparms

  mainpgm       is the name of the Pascal main program to be executed
                the main program must have been compiled by the
                Pascal compiler and must have the filetype TEXT

  subpgms       up to 4 Pascal sub programs (modules) compiled by the
                Pascal compiler with filetype TEXT

  runparms      up to 10 run time parameters (8 byte strings due to
                CMS limitations)

  Usage:

  The PASRUN command is used to link (LOAD ... START) and run a Pascal
  program, possibly together with some sub programs. Run time parameters
  (command line parameters) may be added.

  The needed run time library objects PASMATH, PASMONN, PASLIBX,
  PASUTILS and PASSNAPC are added automatically; they need not be
  specified on the PASRUN command. See more at "Run Time Routines".

  If the program wants to access files, you need to establish FILEDEFs
  for the DD names used by the program before issuing the PASRUN command.
  This is true for the Pascal standard files INPUT and OUTPUT, too.

  If you want INPUT and OUTPUT to be connected with the terminal,
  you can use PASRUNS instead of PASRUN (PASRUNS means: PASRUN
  with Standard FILEDEFs for terminal I/O). See later about PASRUNS.


Run Time Routines

  The run time system needed by Pascal programs is seperated into
  different modules.

  PASMONN       is the so called Pascal monitor, which contains the
                startup code for the Pascal main program, as well
                as general I/O routines and error handlers etc.;
                the generated Pascal program is called like a
                subroutine from PASMONN. PASMONN contains the
                primary entry point $PASENT.

  PASLIBX       is the Pascal extended library and contains more
                library functions which are not part of PASMONN

  PASUTILS      more utility functions; some of them make the
                Stanford Pascal compiler behave like IBM's
                Pascal VS

  PASSNAPC      the Pascal snapshot routine for CMS; it writes
                a short language specific call trace and variable
                dump in case of a runtime error

  PASMATH       is a TXTLIB library which contains math routines
                like SIN and SQRT to be used by Pascal programs;
                it is in fact the same as the FORTLIB TXTLIB
                which was present in older VM/370 distributions


Reading and writing files

  Files are accessed in general by specifying them in the Pascal
  program statement (only the names; in case of VM/CMS, the names
  are DD names).

  Most of these files need to be defined inside the program;
  maybe as of type TEXT, that is PACKED FILE OF CHAR (normal textfile)
  or as FILE OF a RECORD structure; in this case we have a binary file.

  Only INPUT and OUTPUT (Pascal standard files) are known without
  definition (TEXT files).

  All files (including INPUT and OUTPUT) can be connected to external
  (CMS) files using the FILEDEF command. Both fixed and variable record
  formats are supported. See the helpfile on FILEDEF for more details.

  If there is no FILEDEF for a certain Pascal file, a file named
  FILE pascalname will be searched (or written) - where pascalname
  is the 8 byte name of the Pascal file.

  If you plan to use INPUT and OUTPUT for terminal I/O, you should
  probably use the library functions TERMIN and TERMOUT to open
  the files INPUT and OUTPUT instead of RESET and REWRITE.

  For more information please refer to the documentation sites
  mentioned at the top of this help file.


Command line parameters

  See the description of PASRUN command above; with PASRUN, you can
  call a Pascal main program with command line parameters.

  The command line parameters (up to 10) are tokenized by CMS, that is,
  they are truncated to strings of at most 8 bytes and then transferred
  to the main program.

  To access the command line parameters from within the program,
  you need to access the parm structure by using the predefined
  OSPARM pointer. The compiler knows by default this structure:

    var OSPARM : -> record
                       PLENGTH : integer ;
                       PSTRING : array [ 1 .. MAXSTRL ]
                                 of char ;
                    end ;

  which can be accessed (read only).

  If OSPARM is nil, then there is no parameter;
  if OSPARM is not nil, then there is a parameter; PLENGTH then is the
  number of characters in the parameter (in PSTRING).


Calling CMS commands from Pascal programs

  The runtime system provides a procedure CMSX; with this procedure,
  Pascal programs can call CMS commands.

  For example: this Pascal coding calls FILEDEF two times to assign
  a certain Pascal file to terminal I/O.

    FCB := FILEFCB ( X ) ;
    CMSCMD := 'FILEDEF XXXXXXXX CLEAR #' ;
    CPT := PTRADD ( ADDR ( CMSCMD ) , 8 ) ;
    MEMCPY ( CPT , FCB , 8 ) ;
    CMSX ( ADDR ( CMSCMD ) , RC ) ;
    CMSCMD := 'FILEDEF XXXXXXXX TERM (RECFM V LRECL 255 #' ;
    MEMCPY ( CPT , FCB , 8 ) ;
    CMSX ( ADDR ( CMSCMD ) , RC ) ;
    PTERM := PTRADD ( FCB , 36 ) ;
    PTERM -> := 'Y'

  Some remarks:

  X is the Pascal File variable; the first line gets the address of the
  FCB (Pascal file control block) for X. CMSCMD is a string variable
  to hold the CMS command pattern. Lines 3 and 4 get the DD name from
  the FCB and transfer it to the CMS command (via pointer CPT).
  Line 5 executes the CMS command (FILEDEF xxxxxxxx CLEAR in this case).

  The # char, BTW, is a "termination char" for the CMS command;
  it is not transferred to CMS.

  The last two lines set the terminal flag in the FCB to make
  the file behave like a terminal file (this controls the Pascal runtime
  functions).

  There is a similar procedure WINX, BTW, which does the same for
  the Windows and Unix implementation of New Stanford Pascal
  (via C system() call).


PASCOMP command:

  PASCOMP sourcename

  sourcename    is the name of the Pascal source file to be compiled;
                the file must have filetype PASCAL and must have
                fixed record format and LRECL 80

  Usage:

  This command is normally not needed by the end user; it calls the
  compiler pass one only. It is called internally by the PASCAL command.

  The result are listings and diagnose outputs and a file named
  sourcename PCODE


PASC370 command:

  PASC370 pcodefile

  pcodefile     is the name of the P-Code object file to be translated
                to 370 machine code. The file must have filetype PCODE
                and must have fixed record format and LRECL 80

  Usage:

  This command is normally not needed by the end user; it calls the
  compiler pass two only. It is called internally by the PASCAL command.

  The result are listings and diagnose outputs and a file named
  pcodefile TEXT


PASLINK command:

  PASLINK mainpgm
  PASLINK mainpgm ( options
  PASLINK mainpgm subpgms
  PASLINK mainpgm subpgms ( options

  mainpgm       is the name of the Pascal main program to be used as
                input for the linker; it must have been compiled by the
                Pascal compiler and must have the filetype TEXT.
                In fact, the linking process is done using the CMS
                commands LOAD and GENMOD.

  subpgms       up to 4 Pascal sub programs (modules) compiled by the
                Pascal compiler with filetype TEXT

  options       no options at the moment; maybe some options are added
                later

  Usage:

  This command LOADs the main program and maybe the specified sub programs
  and builds a MODULE. The MODULE has the name of the main program and
  it contains all the needed run time library functions, too (see
  "PASRUN command" and "Run Time Routines" for details).

  Unfortunately, the generated MODULEs don't run successfully at the moment;
  there are some problems with file access. Maybe the problems will be
  fixed in the future. For the moment, Pascal programs must be executed
  using PASRUN (or PASRUNS) and the executables must be stored as object
  files with filetype TEXT.


PASRUNS command:

  PASRUNS mainpgm
  PASRUNS mainpgm ( runparms
  PASRUNS mainpgm subpgms
  PASRUNS mainpgm subpgms ( runparms

  mainpgm       is the name of the Pascal main program to be executed
                the main program must have been compiled by the
                Pascal compiler and must have the filetype TEXT

  subpgms       up to 4 Pascal sub programs (modules) compiled by the
                Pascal compiler with filetype TEXT

  runparms      up to 10 run time parameters (8 byte strings due to
                CMS limitations)

  Usage:

  PASRUNS works much the same way as PASRUN (see there).

  The only difference is that PASRUNS provides several standard FILEDEFs
  for predefined Pascal files, that is:

  FILEDEF INPUT TERM (RECFM V LRECL 255
  FILEDEF OUTPUT TERM (RECFM V
  FILEDEF PASTRACE TERM (RECFM F

  so you probably may want to use PASRUNS instead of PASRUN, if you want
  to do terminal I/O with files INPUT and OUTPUT.

  Otherwise:

  consider coding

  TERMIN (INPUT);
  TERMOUT (OUTPUT);

  at the beginning of your Pascal main program, which has much the same
  effect.


PASFORM command:

  PASFORM pgmname

  pgmname       is the name of the Pascal source program to be formatted;
                the file must have filetype PASCAL and must have
                fixed record format and LRECL 80

  Usage:

  PASFORM creates a new variant of the Pascal source program with
  proper indentation and better source code layout; it is useful
  when the source code layout is bad due to program maintenance
  which had been done without taking care of the beauty of the
  source code.

  It can only be done successfully, if the Pascal source code is free
  of syntax errors. So it is good practice to run the compiler first
  on source codes you want to modify using PASFORM.

  PASFORM first copies to source code to a file with filetype BACKUP

  Then it works on the original file and creates a (beautified) copy
  of the source code; if it terminates without errors, it deletes the
  original file (but keeps the BACKUP file) and rename the new file
  to the original name (with filetype PASCAL).

