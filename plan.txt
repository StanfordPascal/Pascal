
2020.11:

* Ausgabe auf mehrere PCODE-Dateien
* Umstellen PCINT auf mehrere PCODE-Dateien
* Umstellen PASCAL2 auf mehrere PCODE-Dateien
* Testen PASCAL2 usw. auf VM
* PCINT: nach %INCLUDE auch 0x0d ueberlesen
* COMPERRB: LEFT and String Condition (nur auf Mainframe)
* File-Pointer besser absichern (kein NEW, WRITE, EOF usw. ermoeglichen)
* WRITE Skalar mit Default-Laenge bringt Runtime-Fehler 1221 (?)
* Verhindern, dass mit WITH Struct-Konstanten geaendert werden
* PASFORM anpassen wg. structconst und Initialisierung
* Auslieferung auf VM - Info auf Facebook
- Auslieferung auf MVS - Info auf Facebook
- Neue Funktion $PASRDX zum Lesen von Skalaren
- Neue Funktion zum Lesen von Skalaren aus Strings
- WRITE-Funktionen (insbesondere WRR) neu
- WRITESTR Funktionen
- Undefined String bei MODIFY2 (UPPER(FN))
- Fehler bei COMPERR4 untersuchen und klaeren
- AVLCACHE START
- Write bei Real 0.0 korrigieren (Mainframe)
- Write bei Real mit fuehrenden Nullen (Mainframe)
- Write bei Skalar mit korrekter Laenge (Mainframe)
- Write fuer Skalar mit Laenge nur, wenn Skalar in dieser Laenge eindeutig
- Parameterposition bei Unterfunktionen am Statement-Ende wieder zurueck
- WRITESTR usw. als Pascal-Funktion
- wenn neuer Compiler eingesetzt ist, Pascal-Runtime abruesten
- Fehler (PASCAL1-Abbruch) bei falschem IF - siehe COMPERR1
- Fehler (PASCAL1-Abbruch) bei falschem Funktionsnamen - siehe COMPERR2
- Fehler (PASCAL1-Abbruch) - siehe COMPERR3
- Fehler bei CONST-Parameter mit Struktur
- Tabs in Pascal-Source akzeptieren
- Aufruf von externen GCC-Funktionen
- PASCAL1N angleichen an PASCAL1, PASCAL1N mit WITH-Erweiterung
- Problem auf Mainframe, wenn PCODE_CHK fuer Pointer aktiv ist (NIL-Pointer-Check)
  CHK N muss wohl neu implementiert werden
- Pointer-Konstruktor ist nicht ueberall in Funktionskopf zulaessig
  (z.B. nicht bei var-Parameter, bei value schon)
- spaeter: klaeren was bei Windows-Textfiles mit Hex-Nullen passiert
- spaeter: klaeren Ein-Ausgabe variante Records
  (insbesondere Mainframe und RECFM=V)

=======================================================================================

2020.09:

* WITH geht nicht mit Record-Konstanten (sollte aber) - Fehler 103
* Initialisierung von Variablen ermoeglichen - analog Pascal-8000 INITIALVALUES
* PASCAL2: Klaeren, was mit CALSTK los ist
* Fehler bei Compile von Pas8000 klaeren (Unreferenced Label)
* Struct Const auch mehrere mit Komma
* Initialisieren von VAR und STATIC mit Const-Identifier
* Problem bei (.1..14.) - zum Beispiel
* Stacken von Informationen bei MST bei PCINT (nicht korrekt!)
* Nein: anketten von MST-Info an korrekten CUP-Befehl (PCINT-Prep-Phase)
* Rueckbau: Stacken von Informationen bei MST bei PCINT

=======================================================================================

2020.04:

* Fehler bei SET-Vergleich mit unterschiedlichen Laengen (PCINT)
* Skip Symbole dokumentieren
* Fehler $PASRDI beheben
* Neue READ-Funktionen auch fuer Boolean, evtl. Skalar ??
* Testen TESTREA3, 7 und 8 auf VM usw. (GET, RDI, RDR) und Korr. Fehler
* Neue Funktion $PASRDB zum Lesen von Booleans
* Abchecken $PASRDB auf TRUE und FALSE
* Fehler in PASCAL1 (bei Bootstrap)
* Fehler in PASCAL2 wg. FILADR_LOADED klaeren
* Fehler bei RFS auf Mainframe (PASMONN) fuehrt zu Abbruch, klaeren
* Testen PASCAL2 auf VM wg. neuer Funktion $PASRDB
* Beispielprogramm fuer CHK mit CHAR-Subrange, Compiler taugt nicht mehr
* Subrange-Check fehlt bei Character-READ (CSP RFC)
* geaenderte CSP RFC testen auf VM (PASMONN aendern)
* Portablitaetsproblem: CHK auf CHAR-Subrange wird mit I-Werten gemacht
* nochmal finaler Test der Version 2020.04 auf VM
* Neue Funktion zum Lesen von Booleans aus Strings

=======================================================================================

2020.01:

* Testen CSP RDV bei Eingabe von Terminal
* zuerst Version 2019.09 auf MVS ausliefern
* Fehler bei CSP RDV auf Mainframe - Maxlaenge ueberschr. bei RDV - TESTREAD.pas
* Testen Unterschied bei Ausgabe Leerzeilen in Textfiles - TESTCOPY.pas
* Fehler Mainframe bei TESTRDV.PAS - am Dateiende
* Fehler Mainframe bei TESTREA3.PAS - bei zweitem Lesen fehlt Anfang
* Fehler Mainframe bei TESTRDC2.PAS - bei leerer Eingabe
* Lesen CHAR(10) und STRING(10) tickt anders als einzelne CHARs - siehe TESTREAD.pas
* Implementieren READ (X : N) - d.h. Change Read einzelne Chars, feste Strings, Varchars
* READ Ints usw. neu als Pascal-Funktion (neue CSVs)
* Problem bei INDEX-Funktion in TESTREA6
* READSTR fuer reals
* Fehler reparieren bei REAL-Eingabe (Nullen nach Dezimalpunkt)
* Write Boolean reparieren (WIDTH-Angaben)
* Write Real reparieren (negative Laenge)
* Write VarChar reparieren (negative Laenge)
* Write Skalars reparieren (negative Laenge)
* Write reparieren auf Mainframe (WRR und WRX bei linksbuendig)
* bei LEFT und RIGHT String mit Laenge Null akzeptieren

=======================================================================================

2019.09:

* Structconst erzeugt andere Offsets bei PASCAL1 (vergl. mit PASCAL1A)
* PASFORM verbessern wg. Zeilenende-Kommentaren
* Fehler beim Uebersetzen von P5 klaeren (siehe TESTSET6.PAS)
* Korrektur Laenge SCL und ASE - nein, ist schon korrekt
* Erweiterung wg. TESTSET6
* a) ASR mit weiterem Parameter wg. Anordnung der Parameter 1 und 2
* b) Parameter entsprechend setzen in SET_PART
* c) ASR implementieren, nichts machen, wenn Parameter falsch angeordnet
* d) Test und dann ASR implementieren auf Mainframe (PASCAL2)
* Dokumentation PCODE_2019
* Varchar-Instruktionen und ASR (neu)
* DISPOSE implementieren (mit Warnung, macht nix) in PASCAL1 als neue CSP
* Fehler bei INDEX Funktion (korrigiert)
* CSP RDD war in PCINT nicht implementiert (READ fuer Binaerfiles)
* PCINT verliert LOC-Information bei CUP-Aufruf, meldet falsche Fehlerzeile
* siehe ebenfalls TESTERR3
* Im Fehlerfall (runtime_error) Funktionsname mit ausgeben (bei PCINT)
* Im Fehlerfall (runtime_error) Call-Stack mit ausgeben (bei PCINT)
* Compile-Fehler in TESTERR3 (Funktion mit String-Ergebnis als byvalue-parm)
* Einlesen STRING-Datentyp mit READLN
* PASCAL2: P-Codes XBG und XEN implementieren
* LEFT und RIGHT bei Strings
* LASTINDEX
* Ausgabe Strings linksbuendig?
* PASCAL2: neue Funktionen testen - siehe TESTNF
* PASCAL2: negative Laenge bei VMV implementieren - siehe TESTERR3
* PASCAL2: Ausgabe Strings linksbuendig mit CSP WRS - siehe TESTWRS
* PASCAL2: neue CSP RDV implementieren - siehe TESTCOPY
* Auslieferung Compiler auf alle Plattformen - Version 2019.09

- P5 testen, Compile klappt ja schon
- Weiter mit PINT.PAS (von P5)
- wenn OK auf Mainframe, abchecken, ob Ausgabe RECFM = V mit var. Records geht
- PAS1976 weiter, damit es sich selbst uebersetzen kann
- GETADR2 usw. erzeugt unnoetigen LA-Befehl z.B. bei VLD 0,0
- weiter siehe unten

- evtl. andere Loesung fuer NESTED WITH
- evtl. tauschen der Semantik: FIELDADDR und POINTER_OFFSET

* Fehler bei NEW mit leerer Variante, siehe PAS1976.PAS (NEW ... TYPES)
* Fehler bei PASCAL2, wenn PASLIBX uebersetzt werden soll (auf VM)
* Fehler 617 wegen falscher Offsets in Structured Constant (PASCAL2)
* der Fehler muss aber in PASCAL1 irgendwo sein ...
* Fehler bei Implentierung von WITH (in Records) und WITH-Statement
* Fehler bei Implentierung von WITH: IND hat falschen Typ (nicht A)
* Fields innerhalb Record kennzeichen: Original vs. WITH-induziert
* relevant bei a) STRUCT_RECORDCONST - hier echter Fehler
* relevant bei b) LISTDEF von Strukturen
- relevant bei c) Debugging (evtl. spaeter)
* was passiert, wenn keine Variante angegeben?
* Fehler bei NEW, wenn nicht existente Variante angegeben
* geloest: WITH mit Pointern geht nicht mit VAR-Parametern
* geloest: NIL-Check aktiv :-)
* hoffentlich auch auf dem Mainframe
* geloest: endlich verstanden: Hash und Buckets

=======================================================================================

2018.06:

* Cache-Funktionen analog OISCACH
* Testen Pascal auf LCM-Maschine
* Fehler bei Leerzeile nach EOF (evtl. durch leere Case-Statements ausgeloest)
* Fehler bei PASFORM (evtl. checken, ob Umgebung fuer PASSCAN passt)

- Fehler bei TESTC1 (Error 145 kommt zu Unrecht)
- READ Strings
- READSTR (READ komplett ueberarbeiten)
- WRITESTR
- weitere Doku auf Homepage
- neue Version: 2019.01

- Reaktion auf zu lange Strings
- Fehlerbehandlung allgemein vereinheitlichen
- PrÅfungen bei V-Instruktionen Mainframe vervollstÑndigen
- neue Version: 2018.08

- Problem bei PASRUNM usw.: Fehler in Pass 2 (254) - ansonsten cool
- Kann man mit PASMAIN Bootstrap statisch linken ? nur ein Module ??
- PRR plattformabh. bei PASCAL1 - implied subscriptrange !!

- Makroprozessor
- externe Funktionen in C
- DB2 Precompiler

* Fehler: nach erstem -> char (8) kommt Fehler S330 bei folgenden char (8)
* Erweitern AVLTREE fuer Objekt-Einfuegen und -Rueckgabe
* neue Version fuer CMS: 2018.06
* Baeume loeschen in AVLTREE usw.
? Fehler bei Compiler und Formatierer raus in diesem Zusammenhang
* Anzeigen Strings in LISTDEF
* Fehler S331 in TESTAVL.PAS
* Lîsung fÅr Templates, z.B. AVL BÑume
* zunaechst Funktion zum Durchwandern fuer AVLTREE
* dann Testen, ob's klappt
* dann Funktion zum Drucken der AVLTREEs
* dann ggf. Erweiterungen
* Fehlermeldung bzgl. WRITEPTR wegmachen
* MEMCMP als builtin function

=======================================================================================

2018.05:

* Wenn LA und Offset/Register = 0, dann LR: besser zentral
* VST 0,-1 Implementierung fehlt
* bei VCC Abfrage auf MAXLENGTH = -1

* Andere Installations-Prozedur fÅr MVS
* Dokument fÅr MVS-Installation
* Dokument fÅr Aufruf externer Module (FORTRAN, ASSEMBLER)
* Info an G. Postpischil, Moshix, J. Winckelmann
* Doku-Files auf Homepage verankern
* Backup-Version korrigieren auf 11.2017
* PCINT2.EXE neu bauen
* PCINT*.EXE auf Homepage und in GitHub
* OS/2 richtigstellen
* VM-Version erstellen und verteilen
* Webseite passt, Freigabe auf Facebook, Mailingliste
* Datentyp CHAR (n)
* Datentyp STRING bzw. VARCHAR (n)
* Datentyp DECIMAL (n, m)
* precisionof
* scaleof
* DECIMAL-Attribute bei WRITE berÅcksichtigen ?
* DECIMAL (n,m) als Funktionsergebnis - siehe TESTDEC
* Konstanten mit digitsof und precisionof Attributen - siehe TESTDEC

* Logik fÅr VARCHARs implementieren
* a) VSTs haben teilweise falsche Parameter
* b) Syntaxfehler rausmachen
* c) VST mit 0 fÅr conformant strings
* d) Logik fÅr conformant string Parameter (var)
* e) LOC nach Prozedur-Entry (vorher vielleicht wegmachen?)
* f) VST 0 implementieren
* g) MAXLENGTH vorher setzen fÅr var Parameter
* h) MAXLENGTH sollte funktionieren
* i) LENGTH sollte funktionieren
* j) ansonsten siehe Testprogramm TESTVARC.PAS
* k) Funktionsergebnis vom Typ STRING
* l) String-Arbeitsbereiche freigeben
* m) Compiler zunÑchst mal in dieser Form nach Mainframe
* n) einige Freigaben fÅr Strings fehlen noch ...
* o) CONST-Parameter (zumindest fÅr Strings)
* p) String-Funktionen lt. Pascal/VS
  q) PASCAL2, d.h. Code-Generierung fÅr Mainframe

* Umbau PASMONN, andere Offsets / als Folge davon
* andere Initialisierung bei PASMAIN
* Variablen starten spÑter (400 statt 352) Compiler Ñndern
* FL1 bis FL4 an anderen Offsets
* weicher öbergang !!
* Lîsung fÅr Templates, z.B. AVL BÑume

- weitere Doku auf Homepage
- Fehler bei Funktionsaufruf mit CHAR auf VM (??)
- const Parameter

- Makroprozessor
- native Code auf Windows etc.
- externe Funktionen in C
- DB2 Precompiler
- 31 Bit Adressierung

- echte DECIMALs implementieren
- DSIN usw. geht auf PC nicht :-)

spÑter:

- evtl. separates nachtrÑgliches Listing, Fehler an korrekter Stelle
- PASFORM besseres Fehlerhandling bei Syntaxfehlern (analog Compiler)

=======================================================================================

* PASCAL1: Zuweisung weiter mit abweichenden LÑngen
* PASCAL1 und PASSCAN Åberarbeiten wg. Parameter bei Fehlermeldungen
* PASCAL1: weiter mit Fehler 117
* P-Code-Instruktion fÅr VorfÅllen mit Blanks mit fester LÑnge
* PASCAL1: Blanks automatisch vorfÅllen bei abweichenden LÑngen
* PASCAL1: RÅckbau Init ERRINFO nach Fehler 117
* Beschreibungen auf Homepage
* ggf. P-Code-Instruktionen fuer MEMSET und MEMCPY
* MEMCPY und MEMSET auf neue P-Code-Instruktionen umbauen
* bei MEMCPY und MEMSET nur was machen, wenn LÑnge > 0
* PASFORM: Åberarbeiten bei 1.. 30 usw.
* bei konstanten LÑngen MOV statt MCP, MFI statt MSE
* evtl. neuer Befehl MZE fÅr Nullsetzen eines Bereichs
* PASFORM weiter verbessern (siehe Startkommentar)
* Fehler: Endlosschleife bei PFEHL.PAS
* Implementieren neue P-Code Instruktionen in PASCAL2
* Fehler bei PASFORM bei C++ Kommentaren innerhalb Expressions
* wieso geht TESTLAB nicht korrekt auf VM?
* Testen neue P-Code Instruktionen auf VM (Hercules)
* TESTERR1: CSP WRP gibt am PC merkwÅrdige LÑnge aus
* TESTERR1: P-Code ADA wird durch PASCAL2 falsch Åbersetzt
* TESTSVAR ausfÅhrlicher testen (neue P-Code Instruktionen)
* PCINT: CUP hat zwei Parameter - Typ und EXTLANG
* PASCAL2 umbauen wg. neuem Parameter bei CUP (EXTLANG)
* Aufruf externer Prozeduren (ASSEMBLER)
* Beispielprogramm erweitern wg. externer Funktion
* Testen Aufruf von externen Funktionen
* Fehler PASCAL1 bei PFEHL.PAS und PFEHL2.PAS
* Fehler bei TESTSTAT ??? repariert ...
* PASCAL2: DFC 0 und DFC N korrekt implementieren
* PASCAL2: MSE hat Parameter 0 und 1 (reverse)
* PASCAL2: Testen TESTERR2 und TESTSTAT auf CMS
* sizeof liefert korrekt Konstante zur Compilezeit
* Testen alles auf MVS
* Testjobs MVS Åberarbeiten
* Symbole fÅr AND und OR klappen auf MVS nicht (siehe TESTAND)
* PCINT: korrekte Fehlermeldung bei nicht implementierter EXTLANG

=======================================================================================

* Version 10.2017 auf MVS, Webseite, deployen
* PASCAL2 Set Datentypen konsolidieren
* Version 10.2017 auf CMS
* Speicherfehler S822 auf MVS verhindert mehrere Compiles hintereinander
* SEARCHID soll Info Åber Fehler 104 zurÅckgeben
* fehlenden Bezeichner bei Simpletype mit korrekter Klasse eintragen
* abhÑngig von Folgesymbol, .. oder ;
* dann auch Folgefehler bei fehlenden Bezeichnern besser abhandeln
* PASCAL1 korrigieren wg. Folgefehlern bei PASFORMN usw.
* Problem (Abbruch bei allen Versionen) bei PASCAL1F.PAS !!
* PASFORM mit neuem Scanner
* Wieso steht GET_STAT auf false trotz $U+ ???
* Deployen Version 11.2017

=======================================================================================

Weiterentwicklung Compiler:

* SCANGENC so anpassen, dass SCANERGX analog PASSCAN erzeugt wird
  (Mengenabfragen anstatt Bereichsabfragen fÅr Ziffern, Gro·- und
  Kleinbuchstaben)

* Bezeichner, die mit $ starten, werden nicht akzeptiert;
  auch gleich _ als erstes Zeichen bei IDENT zulassen

* PUT vor REWRITE klappt nicht (OUTPUT, siehe COPYREAL.PAS); nur auf VM -
  vermutlich lîst PUT kein implizites REWRITE aus ...

* DFC fÅr statische Variable mit LÑnge 255 fÅhrt zu Laufzeitfehler

* Hex-Konstanten fÅr Stringkonstante mit LÑnge 256 wird nicht unterstÅtzt

* Problem bei Subrange mit Integers und Schreibweise 1..5 (Beispiel TESTXB.PAS)

* Komisches Verhalten, wenn bei EOF der angebene File nicht definiert ist
  (Folgefehler bei E104)

* Konstanten-Definition EBCDIC-Tabelle mit CHAR erzeugt DFC C mit BinÑrkruscht,
  hier fehlt Abfrage auf Hex-Schalter (Beispiel TESTXB.PAS)

* Compiler geht evtl. nicht mit $D+

* siehe COPYREAL.PAS: CSP WRE und CSP PUT sind nicht implementiert

* Åbergangsweise: EOLN sollte bei nicht-offenen Dateien auf False stehen,
  klappt bei PC, aber nicht beim Mainframe

- siehe COPYTEXT.PAS: ohne RESET(INPUT) lÑuft's falsch (1. Zeile fehlt)
  EOF/EOLN mÅssen RESET auslîsen
  repariert auf Windows etc. (PCINT), auf dem Mainframe noch nicht,
  da es dort nîtig wÑre, EOF und EOL als echte CSPs zu implementieren

=======================================================================================

Aktionen Compiler:

* Letzte Zeile Source fehlt
* Fehlernummer dreistellig mit fuehrenden Nullen
* Fehlertexte einlesen und in Listing ausgeben
* Ueberschrift Compiler-Listing korrekt
* Summary korrekt / Errlog stimmt noch nicht
* Kette aus StringConsts bei CONSTANT
* Kette aus StringConsts bei FACTOR
* Char-Strings korrekt zusammenbauen
* Testen Outcome bei PDOKKNEU
* Problem bei VM-Version mit WITH usw. (Fehler P6)
* Compiler-Infos einsteuern via LISTTAG usw.
* Abgleichen PASSCAN.PAS mit SCANGEN-Ergebnis
* WRI mit negativer Weite auf Mainframe Runtime zulassen
* SET-Logik bei PASCAL2 ueberarbeiten
* Command-Line Parameter wieder gaengig machen
* d.h. OPTIONS nach PASCAL1 zurueckfuehren
* Compiler-Fehler aus PLAN.TXT untersuchen

=======================================================================================

Aktionen Scanner:

* zeichensatz-tabelle auf char umst. / geht derzeit nicht
* integer hex konstanten werden nicht korrekt verarbeitet
* syrange korremt implementieren
* fehler symb_unknown am ende ?
* umstellen auf Module
* verschiedene Kommentartypen implementieren (verschachtelt)
* inklusive Optionen, Ausgabe in Optionen-Struktur
* Optionsstring sollte bei erstem Blank enden
* oder bei Kommentarende natuerlich
* evtl. zurueck zu COMMENT und verschachtelte Komm. zulassen
* Fehlerposition in Kommentar falsch
* Fehlertexte ermoeglichen
* Testausgaben ueber verarbeitete Optionen
* Schneller (SCAN_CODE als Vektor)
* Fit machen fuer Protokoll-Beduerfnisse des Compilers
* keine Ausgabe der Zeile Null
* PASSCANL umbauen auf neue Funktion
* Summary ausgeben als von aussen rufbare Unterfunktion
* Test von TESTSCAN aus
* Einbau in Compiler
* siehe Compiler-Probleme in Datei PLAN.TXT

=======================================================================================

Weiterentwicklung Compiler (09.2017):

* XCOMP nach Hercules zurÅck
* XCOMP (benîtigt $PASSYS - GETMAIN/FREEMAIN bzw. PASLIBX)

* gemischte String-Konstanten
* sizeof fÅr String-Konstanten ermîglichen

* SCANGEN (TESTSCAN) lÑuft immer noch auf Fehler
* SCANGENC weiter (Listing in Pascal generieren usw.)
* Kommentare im C++ Stil //******
* Pascal-Scanner generieren via SCANGENC
* Generierten Scanner fÅr Compiler nutzen

------------------------------------------------------------

Weiterentwicklung Compiler (05.2017):

* PASCAL3: CSP EOL korrekt implementieren
* PASCAL3: CSP RDB implementieren
* SHOWHEX: BinÑrdateien lesen auf Windows? Stimmt showhex mit binÑr?
* SHOWHEX: FILEDEF auf CMS RECFM=F Dateien aufmachen bei fehlendem RECFM ?
* ASSIGN-Funktion in PASUTILS
* DUMPSTOR-Funktion in PASUTILS
* Diplomarbeit in separates Unterverzeichnis und in sep. VM-User mit allen Dateien
* OSPARM
* kleiner Fehler bei Unterfunktion DUMPSTOR raus
* Probleme bei PASCAL3 - Vergleichen ASMOUT bei verschiedenen Programmen
* Probleme bei CLRSCRN behoben durch WAITT-Makroaufruf
* Funktionen CMSX und WINX - system-call bei Windows etc.
* erstes Einlesen bei WAIT/READY bei PC und Mainframe ???
* READLN, wie genau ???
* weiter mit Diplomarbeit / MSFEDIT ???
* weiter mit Diplomarbeit IVMODED
* Hercules/MVS (TK4-)
* TABUNEU ...
* PASSNAP via Runtime-Option abschalten (geht schon, NOSNAP, NOSPIE)
* del passnapm.* /s (auch zuhause)
* Register- und PSW-Ausgabe bei PASMONN
* Ausgabefunktionen nach hinten, sep. Basisregister
* Register- und PSW-Ausgabe bei PASSNAP und PASSNAP korrigieren
* OEVMODED usw. funktioniert nicht mehr mit PCINT vom 9.3.
* PASSNAP verstehen und Åberarbeiten wg. Pointer-Ausgabe
* ABEND mit DUMP nach PASSNAP via Runtime-Option

- Generierten Scanner fÅr PASFORM nutzen
- PASSNAP fÅr Windows ?
- kann Parameter wg. Stack bei CUP und CSP weg ?

? Abbruch 0C1 bei PRIMZERL - eigentlich beim Integer-Einlesen und Dateiende (MVS)
? Einlesen von char-Arrays mit Readln analog Integers (Dialog) korrekt - TESTMAJ
- von JÅrgen MÅhle- und Reversi-Programm ?
- direkter Zugriff analog fseek? Dann evtl. File-System analog VSAM
- TR440 als neues Ziel ?

- weitere Symbole fÅr Pascal: <<, >>, +=, ...
- Pascal-Syntax erweitern (mehr Operatorebenen)
- PARSGEN
- C-Formatierer mit PARSGEN

- EOF berÅcksichtigen beim Lesen von Integers und Reals ?

- PCOMP.PAS: Pascal P4 Compiler von 1996 mit Strings (J. Reichmann)
- PCOM und PINT: P5 Compiler - ebenfalls 1996
- Evaluierungs-Programm von P5 ? geht nicht ... Abbruch

------------------------------------------------------------

Version 02.2017

* #PASMAI# CSECT bei Modulen individuell benennen (DUPLICATE ID)
* Herc: PRUN EXEC erweitern wg. Dazulinken und Parametern
* Gleitkomma-Ausgabe passt nicht
* Herc: CLOSE auf Hercules korrekt behandeln
* Herc: PASCALVS und TESTVS gÑngig machen
* Herc: SatzlÑnge bei Ausgabedateien aus LRECL holen, nicht aus BLKSIZE !!
* PCINT: RDR implementieren
* TRUNC auf Herc und Windows vergleichen, insbesondere bei negativ
* FLR in PASCAL2 implementieren
* PASMATH Bibliotheksmodul neu: ROUNDX (mit FLOOR anstelle TRUNC)
* Unbekannte Funktion: Fehler 186, Default Ergebnistyp Integer
* Rundung bei letzter Stelle bei WRR auf Hercules
* Fehler Compiler bei Arithmetik nach TRUNC-Aufruf usw.
* ASMOUT-Ausgabe Gleitkommakonstanten bei PASCAL2 anpassen
* Ergebnisse bei TZZBRX - Ausgabe Fahrkurven Rundung ?
* TZZBRX gÑngig machen auf Windows, Ergebnisse mit Herc vergleichen
* Unterschied bei TZZBRX zwischen Hercules und Windows klÑren
* andere Ausgabe bei E-Ausgabe auf Windows
* XOR als neues Keyword bei PASFORM aufnehmen
* PASFORM anders bei Kommentaren au·erhalb von Funktionen
* PASMONN (PASCSP) Re-Engineering weiter
* Neue Version kommunizieren Åber Hercules-Liste und Webseite

------------------------------------------------------------

alte Aktionen:

* Linux: Compilerwarnungen in linux.wx Files
* COMPILER.LIS: Ausgabe der statischen CSECTs erfolgt anders, verschoben,
* Endlosschleife beim Compiler bei Set-Konstanten of char, siehe PASFORM
* ansonsten: etliche Programme gehen, z.B. KALENDER, TESTINP, ...
* Compiler geht !!! - 18.12.2016
* checken, ob er auf allen Plattformen geht (OS/2, Linux)
* Linux: Problem beim Einlesen der Textfiles, vermutlich 0x0d Issue
* Summary auf Konsole trotz Umleitung auf Liste
* WRR fehlt (Gleitkomma-Ausgabe)
* Fehler bei SMV wg. öberlappung bzw. Einsparen, wenn Adressen gleich (PCINT)
* effektive Adressen auch bei LDA, STR, SLD
* Sets bei char (on ASCII) sind zu kurz wg. Zeichensatz-Problematik
* parm3 noch nicht implementiert: vermutlich BinÑrfile / ermîglichen
* Module ermîglichen (zusammenlinken)
* VOIDPTR als Typ externalisieren
* Fehler Ausgabedatei bei TESTFILE (Fehler in PASCAL2.PAS)
* UXJ und XLB funktionieren nicht (PCINT auf Windows usw., Compile SCANGEN)
* Hex-Constanten in Pascal zugelassen
* PASFORM bezÅglich 0x0... fit machen
* SQL-Formatierer auf der Basis von SCANGEN usw.
* SCANGEN nach Pascal (zurÅck) portieren (ausgesetzt, C-Variante ok)
* operators "and", "or", "xor" and "not" logical or bitwise
* ... depending on the arguments
* PCINT: Sourcelines bei Untermodulen korrekt einmischen
* PCINT: CUP bei unbekannten Untermodulen ($PASSYS) ggf. auf Minus 1
* PCINT: CUP mit negativer Adresse nicht BADBRANCH, sondern interpret.
* Fehler STACKNEG bei TZWB ... / DSQRT implementieren
* ALLOC bei $PASSYS ist implementiert, XCOMP lÑuft (kleiner Fehler: BADFILE)
* Fehler 126 bei unbekannten Prozeduren eliminieren
* Fehler 184 statt Fehler 104 bei unbekannten Prozeduren
* Code erzeugen bei unbekannten Prozeduren
* fehlende Funktionen von Pascal-VS wie TERMIN, TERMOUT, CLOSE, DATETIME, HALT hinzuf.
* Logik bei WORK_PARAMETER anders (einfacher) wg. LLC4
* Value-öbergabe Integer nach Float zulassen
* Unterschiedliche String-LÑngen ?

------------------------------------------------------------

Test mit PASCAL1:

x f=simpletype
x f=searchid
LSP1 ist undefiniert, deshalb Abbruch, weiter untersuchen
mehr Parameter bei D = Display, z.B. Adresse in hex und 2. Adresse mit + angeben
Beispiel: d x1190 +20
bei x: unbekannte Eingaben ignorieren mit entsprechender Meldung;
derzeit werden nur akzeptiert:
x r oder x ret
x f=funktionsnamen
x l=loc

------------------------------------------------------------

TESTINP:
000007: 011       0        40           CSP FDF
+++ parm3 noch nicht implementiert !! (vermutlich Text/binÑr)

TESTREAD passt

TEST1 passt

TESTDUPL passt

FIBOK: passt

TESTSCAL: CSP WRX fehlt

FIBDEMO: Snapshot usw.

TESTSTAT: Dazulinken von Untermodulen fehlt

TESTSET: Mengenoperationen

PASFORM: etliches fehlt

------------------------------------------------------------

weiter:

* Test mit rekursiver Prozedur
* Dateien zuordnen via Environment
* Test mit PASFORM, bricht ab bei STR B,2,232 (LOC 1582)
* Pasform ist ok

- Test mit PASCAL1
a) PASCAL1.PRR nach COMPILER.PRR kopiert
b) OSPARM ist nicht vorhanden, deshalb Patch in COMPILER.PRR
c) korrekte Lîsung fÅr OSPARM folgt spÑter
d) CSP RDS implementieren als nÑchstes

------------------------------------------------------------

PortabilitÑts-Issues:

? INIT-Pattern zunÑchst auch auf X'81' gesetzt, passt das ???

* Sets of CHAR werden binÑr dargestellt (EBCDIC), daher nicht portabel

* verkÅrzte Sets wird nicht funktionieren bei CHAR
  (Set-Konstanten nur in der LÑnge MAXELEM, aber MAXELEM ist codeabhÑngig)

------------------------------------------------------------

irgendwann spÑter:

- konkrete Offsets abschaffen, statt dessen symbolische Adressierung
- und symbolisches Layout der Data Section



*************************************************************
PASCAL.MEMO from first activities in the year 2011 :-)
*************************************************************

plan fuer die pascal-weiterentwicklung
---------------------------------------

* phase 1 laeuft anhand des uebertragenen text-files, aber instabil
  ist soweit korrigiert, allerdings via load/genmod/runparm
  spaeter mal checken, ob es auch besser geht

* dann: phase 1 neukompilieren und checken, ob sie immer noch laeuft
  phase 1 hat auch nach recompile kein problem und liefert dasselbe
  ergebnis. man muesste jetzt gelegentlich mal die ganzen optionen usw.
  checken

* pasmonn neu uebersetzt (assemble mit global osmacro) ist identisch
  zu pasmonn uebernommen von music/sp !!!

* phase 2 sollte evtl. auch laufen anhand des uebertragenen text-files
  phase 2 laeuft anhand des uebertragenen text-files. wenn man allerdings
  die phase2 neu uebersetzt, laeuft die phase 2 beim versuch, die
  phase 1 neu zu uebersetzen, in eine endlosschleife ... mit anderen
  programmen geht es aber.
  neu am 24.10.2011: das geht jetzt, via (clear hinter load.
  offenbar ein initialisierungsproblem im pascal-monitor

* dann sollten wir einen funktionierenden 82er-compiler haben !!
  ja, er funktioniert soweit ganz gut.

- offene punkte beim compiler:
* date liefert datum xx.xx.1911 - erledigt
* fehler E6 bei verschachtelten kommentaren - erledigt
* am schluss sollen die fehler aufgelistet werden, das tut aber nicht

* korrektur pasfsql, woher kommt der syntaxfehler?
  kein syntaxfehler mehr da.

- pasform so erweitern, dass die stanford-syntax verstanden wird
  oder pformat ein bisschen abaendern (ist vielleicht einfacher)
  also:
  a) pformat muss erweiterte syntax akzeptieren
  b) option, dass pformat die gartenzaeune weglaesst
  c) option, dass pformat die kommentare in gaensefuesschen weglaesst
  d) wortsymbole klein schreiben
  e) Formatierung analog pasform
  f) oder doch pasform anpassen bzw. erweitern - oder beides

* compiler formatieren

- optionen auschecken, z.B:

- assembler erzeugen
  tatsaechlich wird maschinencode angezeigt;
  klaeren, wie aufwendig es ist, stattdessen ASSEMBLER anzuzeigen

- debug optionen

- profiler

* continue fuer schleifen

* break fuer schleifen

* return fuer vorzeitiges verlassen von proz. und funkt.

* Problem bei Phase 2: ASMOUT wird auch ausgegeben (1 Zeile),
  wenn A-Option nicht gesetzt ist

- allow shorter String constants to be assigned (padded with blanks)

- allow static definitions (local to procedures and functions)

